#!/usr/bin/python
from collections import OrderedDict
from datetime import datetime
from os import path,makedirs
from psutil import Process
from subprocess import Popen, PIPE
from time import sleep, time


MEASURE_TIME_INTERVAL = 0.1 # in seconds
TOPOLOGICAL_WATERSHED_PATH = '/home/damian/Topological-Watershed/SourceCode/bin/TopologicalWatershed/topologicalWatershed'
SOURCE_DIRECTORY = '/home/damian/Topological-Watershed/imagenesAleatorias'
IMAGES_TO_PROCESS = ['random500x500.png','random1000x1000.png','random1500x1500.png',
'random2000x2000.png','random2500x2500.png','random3000x3000.png','random3500x3500.png']
OUTPUT_DIRECTORY = SOURCE_DIRECTORY + '/resultados-{}'.format(datetime.now().isoformat())

# measurement details : measure_name -> (neighbor_relation,number_of_threads)
MEASUREMENT_DETAILS = OrderedDict()
MEASUREMENT_DETAILS['secuencial_r4'] = (4,0)
MEASUREMENT_DETAILS['secuencial_r8'] = (8,0)
MEASUREMENT_DETAILS['1-threads_r4'] = (4,1)
MEASUREMENT_DETAILS['1-threads_r8'] = (8,1)
MEASUREMENT_DETAILS['2-threads_r4'] = (4,2)
MEASUREMENT_DETAILS['2-threads_r8'] = (8,2)
MEASUREMENT_DETAILS['4-threads_r4'] = (4,4)
MEASUREMENT_DETAILS['4-threads_r8'] = (8,4)
MEASUREMENT_DETAILS['8-threads_r4'] = (4,8)
MEASUREMENT_DETAILS['8-threads_r8'] = (8,8)
MEASUREMENT_DETAILS['16-threads_r4'] = (4,16)
MEASUREMENT_DETAILS['16-threads_r8'] = (8,16)


def getMean(aNumList):
    """ calcule mean of a numeric list """
    return reduce(lambda x, y: x + y, aNumList) / len(aNumList)


def measure(sourceImagePath,outputImagePath,neighborRelation,numberOfThreads = 0):
    """ Run topological watershed.
        PARAMS:
            sourceImagePath: input image file path
            outputImagePath: output image file path
            neighborRelation: neighbor relation type
            numberOfThreads: number of threads to use
        RETURN:
            4-tuple indicaring
                - RAM memory usage (%)
                - CPU usage (%)
                - process' stdout
                - total execution time        
    """
    memPercent = []
    cpuPercent = []
    
    #begin time
    start = time()
    
    #start topological watershed process
    if numberOfThreads == 0:
        topwatProcess = Popen([TOPOLOGICAL_WATERSHED_PATH,'-in', sourceImagePath, '-out',
                              outputImagePath, '-r', str(neighborRelation)], stdout=PIPE)
    else:
        topwatProcess = Popen([TOPOLOGICAL_WATERSHED_PATH,'-in', sourceImagePath, '-out',
                              outputImagePath, '-r', str(neighborRelation), '-t', 
                              str(numberOfThreads)], stdout=PIPE)
    
    #topological watershed process snapshot
    topwatPS = Process(topwatProcess.pid)
    
    #discard first cpu medition as will always be 0
    topwatPS.get_cpu_percent()

    # while process is running
    while topwatProcess.poll() == None:
        
        #get current cpu percent
        cpuPercent.append(topwatPS.get_cpu_percent())
        
        #get current memory usage percent
        memPercent.append(topwatPS.get_memory_percent())
        
        #sleep for a while
        sleep(MEASURE_TIME_INTERVAL)
    
    #end time
    end = time()
    return (getMean(memPercent),getMean(cpuPercent),topwatProcess.stdout.read(),end - start)

    
def run_measurement():
    start = time()
    #create output dir
    makedirs(OUTPUT_DIRECTORY)
    
    #iterate over all the images to process
    for image_file_name in IMAGES_TO_PROCESS:
        image_file_name_without_extension = path.splitext(image_file_name)[0]
        
        #iterate over all mesarument details
        for medition_name,(neighbor_rel,threads) in MEASUREMENT_DETAILS.iteritems():
            output_file_name = image_file_name_without_extension + '_{}.png'.format(medition_name)
            
            #do measure
            result = measure(path.join(SOURCE_DIRECTORY, image_file_name), 
                             path.join(OUTPUT_DIRECTORY, output_file_name),
                             neighbor_rel,
                             threads)            
  
            print output_file_name + ' - ' + str(result)
    
    end = time()
    
    print 'total time: ' + str(end - start)
    
    
if __name__ == "__main__":
    run_measurement()
